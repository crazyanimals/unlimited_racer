#include "stdafx.h"
#include "FPSCounter.h"


//////////////////////////////////////////////////////////////////////////////////////////////
// resets counter and starts counting frames;
// recountInterval is specifying how often is FPS value being recounted (in miliseconds)
// default value is 1000, that is one second
//////////////////////////////////////////////////////////////////////////////////////////////
void CFPSCounter::Start(APPRUNTIME recountInterval)
{
	cFrames = 0;
	cUncountedFrames = 0;
	lastRecountTime = 0;
	FPS = 0;
	this->recountInterval = recountInterval;
	TimeCounter.Start();
}

//////////////////////////////////////////////////////////////////////////////////////////////
// sets the recountInterval
//////////////////////////////////////////////////////////////////////////////////////////////
void CFPSCounter::SetRecountInterval(APPRUNTIME recountInterval)
{
	this->recountInterval = recountInterval;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// pauses counter
//////////////////////////////////////////////////////////////////////////////////////////////
void CFPSCounter::Pause()
{
	TimeCounter.Pause();
}

//////////////////////////////////////////////////////////////////////////////////////////////
// activates paused counter
//////////////////////////////////////////////////////////////////////////////////////////////
void CFPSCounter::Continue()
{
	TimeCounter.Continue();
}

//////////////////////////////////////////////////////////////////////////////////////////////
// overloaded preincrement operator - increments count of rendered frames
// returns count of frames rendered from the last Recount() call
//////////////////////////////////////////////////////////////////////////////////////////////
UINT CFPSCounter::operator++()
{
	Increment();
	return cUncountedFrames;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// overloaded postincrement operator - increments count of rendered frames
// returns count of frames rendered from the last Recount() call
//////////////////////////////////////////////////////////////////////////////////////////////
UINT CFPSCounter::operator++(int)
{
	Increment();
	return cUncountedFrames;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// increments the cFrames and cUncountedFrames values
//////////////////////////////////////////////////////////////////////////////////////////////
void CFPSCounter::Increment()
{
	cFrames++;
	cUncountedFrames++;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// recounts actual FPS, but only ones per recountInterval at max
//////////////////////////////////////////////////////////////////////////////////////////////
void CFPSCounter::Recount()
{
	if (TimeCounter.GetRunTime() > recountInterval + lastRecountTime)
	{
		FPS = (float) cUncountedFrames / (float) (TimeCounter.GetRunTime(false) - lastRecountTime) * 1000.0f;
		lastRecountTime = TimeCounter.GetRunTime(false);
		cUncountedFrames = 0;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////
// returns actual FPS value
//////////////////////////////////////////////////////////////////////////////////////////////
float CFPSCounter::GetFPS()
{
	Recount();
	return FPS;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// returns an average FPS counted on whole counter runtime
//////////////////////////////////////////////////////////////////////////////////////////////
float CFPSCounter::GetFPSFromStart()
{
	return (float) ((double) cFrames / (double) TimeCounter.GetRunTime()) * 1000.0f;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// returns count of frames rendered from the Start() call
//////////////////////////////////////////////////////////////////////////////////////////////
__int64 CFPSCounter::GetFramesFromStart()
{
	return cFrames;
}

//////////////////////////////////////////////////////////////////////////////////////////////
// says whether the counter is active (== not paused)
//////////////////////////////////////////////////////////////////////////////////////////////
BOOL CFPSCounter::IsActive()
{
	return TimeCounter.IsActive();
}

//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
