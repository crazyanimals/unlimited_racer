#include "VertexNormals.h"


//////////////////////////////////////////////////////////////////////////////////////////////
//
// adds a normal, it does nothing, when count of normals reaches the maximal count
//
//////////////////////////////////////////////////////////////////////////////////////////////
void CVertexNormals::AddNormal( D3DXVECTOR3 * vec )
{
	if ( Count >= MAX_COUNT_OF_NORMALS ) return;

	D3DXVec3Normalize( &Normals[Count++], vec );
};


//////////////////////////////////////////////////////////////////////////////////////////////
//
// returns the resultant average normal
//
//////////////////////////////////////////////////////////////////////////////////////////////
D3DXVECTOR3 CVertexNormals::GetNormal()
{
	D3DXVECTOR3	vec = D3DXVECTOR3( 0, 0, 0 ), norm;

	if (!Count) return vec;

	for (DWORD i = 0; i < Count; i++) vec += Normals[i];
	vec /= (float) Count;
	
	D3DXVec3Normalize( &norm, &vec );

	return vec;
};


//////////////////////////////////////////////////////////////////////////////////////////////
//
// adds a normal, but computes it from vertices of triangle given in clockwise order
//
//////////////////////////////////////////////////////////////////////////////////////////////
void CVertexNormals::AddNormal( D3DXVECTOR3 * v1, D3DXVECTOR3 * v2, D3DXVECTOR3 * v3 )
{
	D3DXVECTOR3		vec1, vec2, vec;

	vec1 = *v1 - *v2;
	vec2 = *v3 - *v2;
	
	D3DXVec3Cross( &vec, &vec2, &vec1 );
	AddNormal( &vec );
};


//////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
